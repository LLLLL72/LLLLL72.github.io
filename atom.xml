<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cola</title>
  
  <subtitle>青柠寒天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cola72.top/"/>
  <updated>2019-04-09T14:24:27.326Z</updated>
  <id>http://cola72.top/</id>
  
  <author>
    <name>Cola</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hadoop初体验</title>
    <link href="http://cola72.top/2019/03/17/hadoop/"/>
    <id>http://cola72.top/2019/03/17/hadoop/</id>
    <published>2019-03-17T13:48:09.000Z</published>
    <updated>2019-04-09T14:24:27.326Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>庭花蒙蒙水泠泠，小儿啼索树上莺</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本学期开了云计算概论这门课，前段时间简单学习了MPI的并行计算的一些东西，现在了解一下Hadoop，当然课堂上讲的东西是非常有限的，今天终于装好了伪分布式的Hadoop，而且跑了最简单的例子。</p><h2 id="三驾马车"><a href="#三驾马车" class="headerlink" title="三驾马车"></a>三驾马车</h2><p>说起Hadoop，不得不说谷歌。Google是大数据时代的奠基者，早在零几年，谷歌发表了著名的三篇论文。这包括Mapreduce编程模型、文件系统GFS以及列式存储BigTable，谷歌虽然没有开源，但是在论文中介绍了相关技术。所以Apache开源的Hadoop和Hbase，其中Hadoop的Mapreduce和HDFS的思想来源于谷歌mapreduce和GFS论文，而hbase来源于谷歌的Bigtable论文。我们采用廉价的商用计算机集群构建分布式文件系统，容错性是一个重要的指标。HDFS提供高容错性。</p><h3 id="Hadoop各节点详解："><a href="#Hadoop各节点详解：" class="headerlink" title="Hadoop各节点详解："></a>Hadoop各节点详解：</h3><h4 id="1-Namenode"><a href="#1-Namenode" class="headerlink" title="1.Namenode"></a>1.Namenode</h4><p>目录的管理者，每一个集群都有一个，记录实时的数据变化，如果没有namenode，HDFS就无法工作，系统中的文件将会全部丢失，就无法将位于不同datanode上的文件快（blocks）重建文件。因此它的容错机制很有必要。</p><p>它主要负责：</p><p>接收用户的请求；<br>维护文件系统的目录结构；<br>管理文件与Block之间的练习；</p><h4 id="2-Datanode"><a href="#2-Datanode" class="headerlink" title="2.Datanode"></a>2.Datanode</h4><p>是文件系统的工作节点，他们根据客户端或者是namenode的调度存储和检索。并且定期向namenode发送他们所存储的块(block)的列表。集群中的每个服务器都运行一个DataNode后台程序，这个后台程序负责把HDFS数据块读写到本地的文件系统。当需要通过客户端读/写某个 数据时，先由NameNode告诉客户端去哪个DataNode进行具体的读/写操作，然后，客户端直接与这个DataNode服务器上的后台程序进行通信，并且对相关的数据块进行读/写操作。</p><p>它主要负责：</p><p>存放数据；<br>文件被分割以Block的形式被存储在磁盘上；</p><h4 id="3-Secondarynode"><a href="#3-Secondarynode" class="headerlink" title="3.Secondarynode"></a>3.Secondarynode</h4><p>SecondaryNameNode是一个用来监控HDFS状态的辅助后台程序。就想NameNode一样，每个集群都有一个SecondaryNameNode，并且部署在一个单独的服务器上。SecondaryNameNode不同于NameNode，它不接受或者记录任何实时的数据变化，但是，它会与NameNode进行通信，以便定期地保存HDFS元数据的快照。由于NameNode是单点的，通过SecondaryNameNode的快照功能，可以将NameNode的宕机时间和数据损失降低到最小。同时，如果NameNode发生问题，SecondaryNameNode可以及时地作为备用NameNode使用。它主要将namenode image（fsimage）和Edit log合并的。</p><p>这两个文件的作用：</p><p>fsimage包含Hadoop文件系统中的所有目录和文件idnode的序列化信息，其中对于文件包含了文件的修改时间、访问时间、块大小和组成一个文件块信息等。对于文件夹而言包含的信息主要有修改时间、访问控制权限等信息。而Edits文件主要是进行客户端对文件操作的记录，比如上传新文件等。并且edits文件会定期与fsimage文件进行合并操作。</p><p>当客户端执行写操作，则NameNode会在edit log记录下来，并在内存中保存一份文件系统的元数据。</p><p>要注意，fsimage文件是文件系统元数据的持久化检查点，不会在写操作后马上更新，这是因为fsimage的写入是非常缓慢的。</p><p>由于Edit log不断增长，在NameNode重启时，会造成长时间NameNode处于安全模式，不可用状态，是非常不符合Hadoop的设计初衷。所以要周期性合并Edit log，但是这个工作由NameNode来完成，会占用大量资源，这样就出现了Secondary NameNode，它可以进行image检查点的处理工作。步骤如下：</p><p>（1）SecondaryNameNode请求NameNode进行edit log的滚动（即创建一个新的edit log），将新的编辑操作记录到新生成的edit log文件；</p><p>（2）通过http get方式，读取NameNode上的fsimage和edits文件，到SecondaryNameNode上；</p><p>（3）读取fsimage到内存中，即加载fsimage到内存，然后执行edits中所有操作，并生成一个新的fsimage文件，即这个检查点被创建；</p><p>（4）通过http post方式，将新的fsimage文件传送到NameNode；</p><p>（5）NameNode使用新的fsimage替换原来的fsimage文件，让（1）创建的edits替代原来的edits文件；并且更新fsimage文件的检查点时间。</p><p>整个处理过程完成。</p><p>SecondaryNameNode的处理，是将fsimage和edites文件周期的合并，不会造成nameNode重启时造成长时间不可访问的情况。</p><h4 id="4-Resourcemanager"><a href="#4-Resourcemanager" class="headerlink" title="4.Resourcemanager"></a>4.Resourcemanager</h4><p>（1）与客户端进行交互，处理来自于客户端的请求，如查询应用的运行情况等。</p><p>（2）启动和管理各个应用的ApplicationMaster，并且为ApplicationMaster申请第一个Container用于启动和在它运行失败时将它重新启动。</p><p>（3）管理NodeManager，接收来自NodeManager的资源和节点健康情况汇报，并向NodeManager下达管理资源命令，例如kill掉某个container。</p><p>（4）资源管理和调度，接收来自ApplicationMaster的资源申请，并且为其进行分配。这个是它的最重要的职能。</p><h4 id="5-Nodemanager"><a href="#5-Nodemanager" class="headerlink" title="5.Nodemanager"></a>5.Nodemanager</h4><p>NM是ResourceManager在每台机器上的代理，负责容器管理，并监控它们的资源使用情况，以及向ResourceManager/Scheduler提供资源使用报告。</p><h3 id="Hadoop安装测试"><a href="#Hadoop安装测试" class="headerlink" title="Hadoop安装测试"></a>Hadoop安装测试</h3><p>网上有很多安装教程，在这里总结一下吧</p><ol><li>配置ssh免密登陆</li><li>下载jdk&amp;hadoop</li><li>安装jdk，解压jdk压缩包，将jdk目录添加到PATH</li><li>安装Hadoop，解压Hadoop，修改XML配置文件</li><li>将Hadoop下的指定文件添加到CLASSPATH</li><li>启动hadoop测试。</li><li>关于编程，IntelliJ在业界被公认为最好的java开发工具之一。可以新建maven工程进行编程，非常方便。</li></ol><p>下面是一在hdfs写文件的一个例子,至此，我又多会了另一种形式的HelloWorld。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>FSDataOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>FileStatus<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>FileSystem<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Write</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException  <span class="token punctuation">{</span>    Configuration conf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Path inFile<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/user/qile/input/file3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileSystem hdfs<span class="token operator">=</span>FileSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>    FSDataOutputStream os<span class="token operator">=</span>hdfs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>inFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    os<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"Hello world!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190329195506919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE4NDU0MDI1,size_16,color_FFFFFF,t_70" alt></p><p>对了，我们可以在默认端口8088和9870分别看到节点和hdfs的一些状态信息。</p><p><img src="https://img-blog.csdnimg.cn/20190329195907206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE4NDU0MDI1,size_16,color_FFFFFF,t_70" alt></p><p>因为我装的是伪分布式，所以显示只有一个活跃节点。</p><p><img src="https://img-blog.csdnimg.cn/20190329195829854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE4NDU0MDI1,size_16,color_FFFFFF,t_70" alt></p><p>刚才写入的file3.txt</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>网上有一句话，说全球很多技术都落后于谷歌，而谷歌自身的技术也在影响全球。要知道，谷歌的三篇论文发布时间是十几年之前。而现在，除了谷歌，还有阿里等也肯定有自己一套系统，不然我们双十一怎么过呢！</p><p>参考:<a href="https://blog.csdn.net/qq_37042789/article/details/81408736" target="_blank" rel="noopener">Patience在努力</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;庭花蒙蒙水泠泠，小儿啼索树上莺&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="Hadoop" scheme="http://cola72.top/categories/Hadoop/"/>
    
    
      <category term="并行计算" scheme="http://cola72.top/tags/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>mpi communication(2)</title>
    <link href="http://cola72.top/2019/03/15/mpi2/"/>
    <id>http://cola72.top/2019/03/15/mpi2/</id>
    <published>2019-03-15T13:15:30.000Z</published>
    <updated>2019-04-09T13:46:14.276Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>佳期不可再，风雨杳如年</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>集群函数相对于点对点函数来说效率更高，MPI提供了丰富的通信形式。而且3.0版本以后提供了非阻塞的集群通信方式。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="1-广播-Broadcast"><a href="#1-广播-Broadcast" class="headerlink" title="1. 广播(Broadcast)"></a>1. 广播(Broadcast)</h3><p>图片会更直观一些</p><p><img src="https://img-blog.csdnimg.cn/20190328205157589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE4NDU0MDI1,size_16,color_FFFFFF,t_70" alt="广播"></p><h3 id="2-Gather"><a href="#2-Gather" class="headerlink" title="2. Gather"></a>2. Gather</h3><p><img src="https://img-blog.csdnimg.cn/20190328205314722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE4NDU0MDI1,size_16,color_FFFFFF,t_70" alt="Gather"></p><h3 id="3-Scatter"><a href="#3-Scatter" class="headerlink" title="3.Scatter"></a>3.Scatter</h3><p>这个就比较优秀了，与广播分发给每一个进程的数据都不相同。</p><p><img src="https://img-blog.csdnimg.cn/20190328205415865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE4NDU0MDI1,size_16,color_FFFFFF,t_70" alt="Scatter"></p><h3 id="4-Gather与Allgather"><a href="#4-Gather与Allgather" class="headerlink" title="4. Gather与Allgather"></a>4. Gather与Allgather</h3><p>Allgather是让每一个进程都获取所有进程的数据。</p><p><img src="https://img-blog.csdnimg.cn/201903282102304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE4NDU0MDI1,size_16,color_FFFFFF,t_70" alt="Compare"></p><h2 id="自定义MPI数据类型并传送"><a href="#自定义MPI数据类型并传送" class="headerlink" title="自定义MPI数据类型并传送"></a>自定义MPI数据类型并传送</h2><p>重点理解一下函数各个参数就明白了，且来看函数原型</p><pre class=" language-c"><code class="language-c"><span class="token function">MPI_Type_struct</span><span class="token punctuation">(</span>            oldtype_nums 结构体类型个数，相同类型一块空间                            <span class="token punctuation">,</span>blocklens_array 每个类型所对应的那块空间的长度                            <span class="token punctuation">,</span>displs_array    每块的起始地址                            <span class="token punctuation">,</span>old_type_array 指定每个块的起始地址与头的偏移量                            <span class="token punctuation">,</span><span class="token operator">&amp;</span>new_mpi_type 新类型                            <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里假设有一个集群，需要对每一个电脑的运算速度进行排序，如果使用了结构体会更方便。<br>就下面这段代码来说，用Allgather让每个电脑获得所有电脑的速度，然后每个电脑遍历一遍这个数据，记录下比自己运算速度大的个数，最后就可以知道自己在集群众运算速度的排名了。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mpi.h"</span></span>    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;malloc.h></span></span>    <span class="token macro property">#<span class="token directive keyword">define</span> oldtype_nums 2</span>    <span class="token macro property">#<span class="token directive keyword">define</span> INT_NUMS 1</span>    <span class="token macro property">#<span class="token directive keyword">define</span> LONG_NUMS 1</span>    <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> speed<span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>Computer<span class="token punctuation">;</span>    MPI_Comm comm <span class="token operator">=</span> MPI_COMM_WORLD<span class="token punctuation">;</span>    MPI_Status status<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">,</span>rank<span class="token punctuation">,</span>speed<span class="token punctuation">,</span>i<span class="token punctuation">,</span>index<span class="token punctuation">;</span>    <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span><span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>rank<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> blocklens_array<span class="token punctuation">[</span>oldtype_nums<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用于存放每个块的长度</span>    MPI_Aint displs_array<span class="token punctuation">[</span>oldtype_nums<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用MPI_Aint，单个元素的存放空间可以放得下地址。</span>    MPI_Datatype old_type_array<span class="token punctuation">[</span>oldtype_nums<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于存放每个块的类型</span>    MPI_Datatype MPI_Computer<span class="token punctuation">;</span>    Computer mycomputer<span class="token punctuation">;</span>    old_type_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>MPI_LONG<span class="token punctuation">;</span>    old_type_array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>MPI_INT<span class="token punctuation">;</span>    blocklens_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    blocklens_array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">MPI_Address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mycomputer<span class="token punctuation">.</span>index<span class="token punctuation">,</span><span class="token operator">&amp;</span>displs_array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mycomputer<span class="token punctuation">.</span>speed<span class="token punctuation">,</span><span class="token operator">&amp;</span>displs_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    displs_array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>displs_array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>displs_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    displs_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">MPI_Type_struct</span><span class="token punctuation">(</span>oldtype_nums<span class="token punctuation">,</span>blocklens_array<span class="token punctuation">,</span>displs_array<span class="token punctuation">,</span>old_type_array<span class="token punctuation">,</span><span class="token operator">&amp;</span>MPI_Computer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Type_commit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MPI_Computer<span class="token punctuation">)</span><span class="token punctuation">;</span>    Computer <span class="token operator">*</span>computer<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    computer <span class="token operator">=</span> <span class="token punctuation">(</span>Computer<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Computer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Computer <span class="token operator">*</span>computers<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    computers <span class="token operator">=</span> <span class="token punctuation">(</span>Computer<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Computer<span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    computer<span class="token operator">-></span>speed<span class="token operator">=</span>rank<span class="token punctuation">;</span>    computer<span class="token operator">-></span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">MPI_Allgather</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>computer<span class="token operator">-></span>speed<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_Computer<span class="token punctuation">,</span><span class="token operator">&amp;</span>computers<span class="token operator">-></span>speed<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_Computer<span class="token punctuation">,</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>computers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>speed <span class="token operator">></span> computers<span class="token punctuation">[</span>rank<span class="token punctuation">]</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span>           <span class="token punctuation">(</span>computers<span class="token punctuation">[</span>rank<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The index of process %d is %d ,speed is %ld\n"</span><span class="token punctuation">,</span>rank<span class="token punctuation">,</span>computers<span class="token punctuation">[</span>rank<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">,</span>computers<span class="token punctuation">[</span>rank<span class="token punctuation">]</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MPI所提供的通信方式非常丰富，这只是一个简单的例子。可以思考一下如果要计算矩阵乘法，我们可以用到哪些函数呢？可以有几种方法？</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;佳期不可再，风雨杳如年&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="MPI" scheme="http://cola72.top/categories/MPI/"/>
    
    
      <category term="并行计算" scheme="http://cola72.top/tags/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
    
      <category term="MPI集群通信" scheme="http://cola72.top/tags/MPI%E9%9B%86%E7%BE%A4%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>mpi communication(1)</title>
    <link href="http://cola72.top/2019/03/10/mpi/"/>
    <id>http://cola72.top/2019/03/10/mpi/</id>
    <published>2019-03-10T12:56:36.000Z</published>
    <updated>2019-04-09T13:46:02.880Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你无法想象自由意味着什么</p></blockquote><h2 id="mpi简介"><a href="#mpi简介" class="headerlink" title="mpi简介"></a>mpi简介</h2><p> MPI是Message Passing Interface的缩写，MPI是一个跨语言的通讯协议，用于编写并行计算机。支持点对点和广播。MPI是一个信息传递应用程序接口，包括协议和和语义说明，他们指明其如何在各种实现中发挥其特性。MPI的目标是高性能，大规模性，和可移植性。</p><h2 id="MPI-点对点通信实验"><a href="#MPI-点对点通信实验" class="headerlink" title="MPI 点对点通信实验"></a>MPI 点对点通信实验</h2><h3 id="求函数的积分"><a href="#求函数的积分" class="headerlink" title="求函数的积分"></a>求函数的积分</h3><p><img src="https://img-blog.csdnimg.cn/20190321154402106.png" alt="函数原型"></p><p>我们知道求一个函数的积分可以转换为求函数与坐标轴之间的面积。如下图：</p><p><img src="https://img-blog.csdnimg.cn/20190321154542660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE4NDU0MDI1,size_16,color_FFFFFF,t_70" alt="函数"></p><p>我们计算积分的思想就是将整个a到b这一段分成p个区域，将这p个区域交给p个计算机计算每个区域的面积，而对于每一个计算机所要计算的区域，又可以分成n个大小为h的区域，每一台计算机只需要计算这n个区域面积的累加和，最后汇总到一个节点即可。</p><p><img src="https://img-blog.csdnimg.cn/201903211552238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE4NDU0MDI1,size_16,color_FFFFFF,t_70" alt="公式"></p><p>代码如下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"mpi.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    MPI_Comm comm<span class="token operator">=</span> MPI_COMM_WORLD<span class="token punctuation">;</span>    MPI_Status status<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">,</span>rank<span class="token punctuation">;</span>    <span class="token keyword">double</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>h<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">double</span> pi<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span><span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>rank<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input a&amp;b\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_INT<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_DOUBLE<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_DOUBLE<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_INT<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_DOUBLE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_DOUBLE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    a <span class="token operator">=</span> a <span class="token operator">*</span> pi<span class="token punctuation">;</span>    b <span class="token operator">=</span> b <span class="token operator">*</span> pi<span class="token punctuation">;</span>    h <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token operator">/</span>size<span class="token operator">/</span>n<span class="token punctuation">;</span>    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        tmp <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token punctuation">(</span>rank<span class="token operator">*</span>n <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token operator">*</span>h<span class="token punctuation">)</span> <span class="token operator">+</span> h<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">*</span>h<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_DOUBLE<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sum<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_DOUBLE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Result of MPI: %lf\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Answer: %lf\n"</span><span class="token punctuation">,</span><span class="token function">sin</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">sin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MPI说到底还是一个通信协议，只负责通信，我们在使用时需要清楚每一个进程的工作，非常小心的为每个进程分配各自的任务，因为如果一个机器down掉，可能整个工作都不能很好的完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;你无法想象自由意味着什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;mpi简介&quot;&gt;&lt;a href=&quot;#mpi简介&quot; class=&quot;headerlink&quot; title=&quot;mpi简介&quot;&gt;&lt;/a&gt;mpi简介&lt;/h2&gt;&lt;p&gt;
        
      
    
    </summary>
    
      <category term="MPI" scheme="http://cola72.top/categories/MPI/"/>
    
    
      <category term="并行计算" scheme="http://cola72.top/tags/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
    
      <category term="mpi点对点通信" scheme="http://cola72.top/tags/mpi%E7%82%B9%E5%AF%B9%E7%82%B9%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>数据结构复习大纲</title>
    <link href="http://cola72.top/2019/03/07/datastructure/"/>
    <id>http://cola72.top/2019/03/07/datastructure/</id>
    <published>2019-03-07T09:25:00.000Z</published>
    <updated>2019-04-01T14:36:20.833Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/datastructure/hello.jpg" alt></p><blockquote><p>善良一点，因为每个人都在与人生苦战</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里将数据结构的考纲搬过来，以记录自己的复习进度</p><h2 id="课程基本要求"><a href="#课程基本要求" class="headerlink" title="课程基本要求"></a>课程基本要求</h2><p>全面系统地掌握队列、堆、栈、树、图等基本数据结构，深刻理解和熟练掌握课程中的典型算法，为计算机学科的学习打下坚实基础。</p><h2 id="考试内容"><a href="#考试内容" class="headerlink" title="考试内容"></a>考试内容</h2><table><thead><tr><th>考点</th><th style="text-align:center">完成</th></tr></thead><tbody><tr><td>链表、间接寻址和模拟指针</td><td style="text-align:center">done</td></tr><tr><td>数组和矩阵</td><td style="text-align:center"></td></tr><tr><td>堆栈和队列及其应用</td><td style="text-align:center"></td></tr><tr><td>跳表和散列</td><td style="text-align:center"></td></tr><tr><td>二叉树和其他树</td><td style="text-align:center"></td></tr><tr><td>合并/搜索应用,堆和堆排序</td><td style="text-align:center"></td></tr><tr><td>左高树,霍夫曼编码和竞赛树</td><td style="text-align:center"></td></tr><tr><td>搜索树,AVL树或红黑树,直方图</td><td style="text-align:center"></td></tr><tr><td>图</td><td style="text-align:center"></td></tr><tr><td>图和贪婪算法</td><td style="text-align:center"></td></tr><tr><td>货箱装载,0/1背包,最短路径和生成树</td><td style="text-align:center"></td></tr><tr><td>分而治之算法</td><td style="text-align:center"></td></tr><tr><td>动态编程</td><td style="text-align:center"></td></tr><tr><td>回溯和分枝定界算法</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;img src=&quot;/images/datastructure/hello.jpg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;善良一点，因为每个人都在与人生苦战&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot;
        
      
    
    </summary>
    
      <category term="DataStructure" scheme="http://cola72.top/categories/DataStructure/"/>
    
    
      <category term="DataStructure" scheme="http://cola72.top/tags/DataStructure/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cola72.top/2018/09/30/helloworld/"/>
    <id>http://cola72.top/2018/09/30/helloworld/</id>
    <published>2018-09-30T09:25:30.000Z</published>
    <updated>2019-03-30T13:32:08.031Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a
        
      
    
    </summary>
    
    
  </entry>
  
</feed>
