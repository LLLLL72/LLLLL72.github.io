<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mpi</title>
      <link href="/2019/03/10/mpi/"/>
      <url>/2019/03/10/mpi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>你无法想象自由意味着什么</p></blockquote><h2 id="mpi简介"><a href="#mpi简介" class="headerlink" title="mpi简介"></a>mpi简介</h2><p> MPI是Message Passing Interface的缩写，MPI是一个跨语言的通讯协议，用于编写并行计算机。支持点对点和广播。MPI是一个信息传递应用程序接口，包括协议和和语义说明，他们指明其如何在各种实现中发挥其特性。MPI的目标是高性能，大规模性，和可移植性。</p><h2 id="MPI-点对点通信实验"><a href="#MPI-点对点通信实验" class="headerlink" title="MPI 点对点通信实验"></a>MPI 点对点通信实验</h2><h3 id="求函数的积分"><a href="#求函数的积分" class="headerlink" title="求函数的积分"></a>求函数的积分</h3><p><img src="https://img-blog.csdnimg.cn/20190321154402106.png" alt="函数原型"></p><p>我们知道求一个函数的积分可以转换为求函数与坐标轴之间的面积。如下图：</p><p><img src="https://img-blog.csdnimg.cn/20190321154542660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE4NDU0MDI1,size_16,color_FFFFFF,t_70" alt="函数"></p><p>我们计算积分的思想就是将整个a到b这一段分成p个区域，将这p个区域交给p个计算机计算每个区域的面积，而对于每一个计算机所要计算的区域，又可以分成n个大小为h的区域，每一台计算机只需要计算这n个区域面积的累加和，最后汇总到一个节点即可。</p><p><img src="https://img-blog.csdnimg.cn/201903211552238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE4NDU0MDI1,size_16,color_FFFFFF,t_70" alt="公式"></p><p>代码如下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"mpi.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    MPI_Comm comm<span class="token operator">=</span> MPI_COMM_WORLD<span class="token punctuation">;</span>    MPI_Status status<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">,</span>rank<span class="token punctuation">;</span>    <span class="token keyword">double</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>h<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">double</span> pi<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token function">MPI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span><span class="token operator">&amp;</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_size</span><span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MPI_Comm_rank</span><span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>rank<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input a&amp;b\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_INT<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_DOUBLE<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_DOUBLE<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_INT<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_DOUBLE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_DOUBLE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    a <span class="token operator">=</span> a <span class="token operator">*</span> pi<span class="token punctuation">;</span>    b <span class="token operator">=</span> b <span class="token operator">*</span> pi<span class="token punctuation">;</span>    h <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token operator">/</span>size<span class="token operator">/</span>n<span class="token punctuation">;</span>    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        tmp <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token punctuation">(</span>rank<span class="token operator">*</span>n <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token operator">*</span>h<span class="token punctuation">)</span> <span class="token operator">+</span> h<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">*</span>h<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_DOUBLE<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sum<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>MPI_DOUBLE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Result of MPI: %lf\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Answer: %lf\n"</span><span class="token punctuation">,</span><span class="token function">sin</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">sin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">MPI_Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MPI说到底还是一个通信协议，只负责通信，我们在使用时需要清楚每一个进程的工作，非常小心的为每个进程分配各自的任务，因为如果一个机器down掉，可能整个工作都不能很好的完成。</p>]]></content>
      
      
      <categories>
          
          <category> MPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并行计算 </tag>
            
            <tag> mpi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构复习大纲</title>
      <link href="/2019/03/07/datastructure/"/>
      <url>/2019/03/07/datastructure/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/datastructure/hello.jpg" alt></p><blockquote><p>善良一点，因为每个人都在与人生苦战</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里将数据结构的考纲搬过来，以记录自己的复习进度</p><h2 id="课程基本要求"><a href="#课程基本要求" class="headerlink" title="课程基本要求"></a>课程基本要求</h2><p>全面系统地掌握队列、堆、栈、树、图等基本数据结构，深刻理解和熟练掌握课程中的典型算法，为计算机学科的学习打下坚实基础。</p><h2 id="考试内容"><a href="#考试内容" class="headerlink" title="考试内容"></a>考试内容</h2><table><thead><tr><th>考点</th><th style="text-align:center">完成</th></tr></thead><tbody><tr><td>链表、间接寻址和模拟指针</td><td style="text-align:center">done</td></tr><tr><td>数组和矩阵</td><td style="text-align:center"></td></tr><tr><td>堆栈和队列及其应用</td><td style="text-align:center"></td></tr><tr><td>跳表和散列</td><td style="text-align:center"></td></tr><tr><td>二叉树和其他树</td><td style="text-align:center"></td></tr><tr><td>合并/搜索应用,堆和堆排序</td><td style="text-align:center"></td></tr><tr><td>左高树,霍夫曼编码和竞赛树</td><td style="text-align:center"></td></tr><tr><td>搜索树,AVL树或红黑树,直方图</td><td style="text-align:center"></td></tr><tr><td>图</td><td style="text-align:center"></td></tr><tr><td>图和贪婪算法</td><td style="text-align:center"></td></tr><tr><td>货箱装载,0/1背包,最短路径和生成树</td><td style="text-align:center"></td></tr><tr><td>分而治之算法</td><td style="text-align:center"></td></tr><tr><td>动态编程</td><td style="text-align:center"></td></tr><tr><td>回溯和分枝定界算法</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/30/helloworld/"/>
      <url>/2018/09/30/helloworld/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
